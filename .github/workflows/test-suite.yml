name: üß™ Test Suite

# Smart triggering strategy - focus on develop branch and feature branches
on:
  push:
    branches: 
      - develop
      - 'feature/**'
      - 'hotfix/**'
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '*.md'
      - '.gitignore'
      - 'LICENSE'
      - '#GUIDE/**'
      
  pull_request:
    branches: [develop]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '*.md'
      - '.gitignore'
      - 'LICENSE'
      - '#GUIDE/**'

  workflow_dispatch:
    inputs:
      run_security_scan:
        description: 'Run security vulnerability scan'
        required: false
        default: true
        type: boolean

env:
  PHP_VERSION: '8.2'
  NODE_VERSION: '18'
  COMPOSER_CACHE_VERSION: v1
  NPM_CACHE_VERSION: v1

jobs:
  # üîç Pre-flight checks
  setup:
    name: üîç Setup & Validation
    runs-on: ubuntu-latest
    outputs:
      php-cache-key: ${{ steps.cache-keys.outputs.php }}
      npm-cache-key: ${{ steps.cache-keys.outputs.npm }}
      should-run-security: ${{ steps.conditions.outputs.security }}
      should-run-docker: ${{ steps.conditions.outputs.docker }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Generate cache keys
        id: cache-keys
        run: |
          echo "php=dependencies-composer-${{ env.COMPOSER_CACHE_VERSION }}-${{ hashFiles('composer.lock') }}" >> $GITHUB_OUTPUT
          echo "npm=dependencies-npm-${{ env.NPM_CACHE_VERSION }}-${{ hashFiles('package-lock.json') }}" >> $GITHUB_OUTPUT
          
      - name: Set conditions
        id: conditions
        run: |
          echo "üîç Debug branch info:"
          echo "github.ref: ${{ github.ref }}"
          echo "github.ref_name: ${{ github.ref_name }}"
          echo "github.event_name: ${{ github.event_name }}"
          
          # Run security scan on develop or manual trigger
          if [[ "${{ github.ref }}" == "refs/heads/develop" || "${{ github.event.inputs.run_security_scan }}" == "true" ]]; then
            echo "security=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Security scan will run"
          else
            echo "security=false" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è Security scan skipped"
          fi
          
          # Run Docker build test on develop or any push event
          if [[ "${{ github.ref }}" == "refs/heads/develop" || ("${{ github.event_name }}" == "push" && "${{ github.ref_name }}" == "develop") ]]; then
            echo "docker=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Docker build will run"
          else
            echo "docker=false" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è Docker build skipped"
          fi
          
      - name: Debug info
        run: |
          echo "üîç Test Suite Started"
          echo "Branch: ${{ github.ref }}"
          echo "Event: ${{ github.event_name }}"
          echo "Security scan: ${{ steps.conditions.outputs.security }}"
          echo "Docker build: ${{ steps.conditions.outputs.docker }}"

  # üì¶ Dependencies & Build
  dependencies:
    name: üì¶ Install Dependencies
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, redis
          coverage: none
          tools: composer:v2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache Composer packages
        uses: actions/cache@v3
        with:
          path: ~/.composer/cache/files
          key: ${{ needs.setup.outputs.php-cache-key }}
          restore-keys: |
            dependencies-composer-${{ env.COMPOSER_CACHE_VERSION }}-

      - name: Install PHP dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Install NPM dependencies  
        run: npm ci

      - name: Build frontend assets
        run: npm run build

      - name: Cache built assets
        uses: actions/cache@v3
        with:
          path: |
            vendor/
            node_modules/
            public/build/
          key: built-assets-${{ github.sha }}

  # üß™ Core Testing
  tests:
    name: üß™ Laravel Tests
    runs-on: ubuntu-latest
    needs: [setup, dependencies]
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: hanaya_shop_test
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
          MYSQL_ALLOW_EMPTY_PASSWORD: no
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping --host=127.0.0.1 --port=3306 --user=root --password=test_password --silent" --health-interval=15s --health-timeout=10s --health-retries=15 --health-start-period=60s

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, redis, mysql, pdo_mysql
          coverage: xdebug
          tools: composer:v2
          ini-values: memory_limit=-1

      - name: Install MySQL Client
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-client netcat-openbsd
          
      - name: Restore built assets
        uses: actions/cache@v3
        with:
          path: |
            vendor/
            node_modules/
            public/build/
          key: built-assets-${{ github.sha }}

      - name: Prepare test environment
        run: |
          echo "üîß Setting up test environment..."
          
          # Create .env.testing from example
          cp .env.example .env.testing
          php artisan key:generate --env=testing
          
          # Configure test database to match phpunit.xml exactly
          cat >> .env.testing << 'EOF'
          APP_ENV=testing
          DB_CONNECTION=mysql
          DB_HOST=127.0.0.1
          DB_PORT=3306
          DB_DATABASE=hanaya_shop_test
          DB_USERNAME=root
          DB_PASSWORD=test_password
          CACHE_STORE=array
          SESSION_DRIVER=array
          QUEUE_CONNECTION=sync
          MAIL_MAILER=array
          MAIL_FROM_ADDRESS=test@hanaya-shop.com
          MAIL_FROM_NAME="Hanaya Shop Test"
          FILESYSTEM_DISK=testing
          BCRYPT_ROUNDS=4
          APP_MAINTENANCE_DRIVER=file
          PULSE_ENABLED=false
          TELESCOPE_ENABLED=false
          EOF
          
          echo "‚úÖ Environment configured successfully"
          echo "Debug: .env.testing contents:"
          head -20 .env.testing

      - name: Create storage directories
        run: |
          mkdir -p storage/framework/{cache/data,sessions,views,testing}
          mkdir -p storage/{app/public,logs}
          mkdir -p bootstrap/cache
          chmod -R 755 storage bootstrap/cache

      - name: Debug MySQL Connection
        run: |
          echo "üîç Debugging MySQL connection..."
          echo "Checking MySQL service containers..."
          docker ps -a | grep mysql
          
          echo "Checking MySQL service health..."
          docker inspect $(docker ps -q --filter "ancestor=mysql:8.0") --format='{{.State.Health.Status}}' || echo "No health info"
          
          echo "Checking network connectivity..."
          nc -zv 127.0.0.1 3306 || echo "Port 3306 not accessible yet"
          
          echo "Testing various connection methods..."
          # Test without password
          mysql --host=127.0.0.1 --port=3306 --user=root --execute="SELECT 'Test without password works' as status;" 2>/dev/null || echo "Without password: Failed (expected)"
          
          # Test with empty password
          mysql --host=127.0.0.1 --port=3306 --user=root --password="" --execute="SELECT 'Test with empty password works' as status;" 2>/dev/null || echo "With empty password: Failed"
          
          # Test with our password
          mysql --host=127.0.0.1 --port=3306 --user=root --password=test_password --execute="SELECT 'Test with test_password works' as status;" 2>/dev/null || echo "With test_password: Failed"
          
          echo "Recent MySQL logs:"
          docker logs $(docker ps -q --filter "ancestor=mysql:8.0") | tail -20 || echo "Cannot get MySQL logs"

      - name: Verify MySQL Environment
        run: |
          echo "üîç Verifying MySQL container environment..."
          mysql_container=$(docker ps -q --filter "ancestor=mysql:8.0")
          echo "MySQL container ID: $mysql_container"
          
          echo "Environment variables in MySQL container:"
          docker exec $mysql_container env | grep MYSQL || echo "No MYSQL env vars found"
          
          echo "MySQL initialization status:"
          docker exec $mysql_container ls -la /var/lib/mysql/ || echo "Cannot access MySQL data directory"
          
          echo "Checking MySQL process:"
          docker exec $mysql_container ps aux | grep mysql || echo "MySQL process info not available"
          
      - name: Wait for MySQL to be ready
        run: |
          echo "‚è≥ Waiting for MySQL to be ready..."
          attempt=0
          max_attempts=60
          
          # Wait for MySQL service to be healthy first
          while [ $attempt -lt $max_attempts ]; do
            # Check if MySQL container is running and healthy
            mysql_container=$(docker ps -q --filter "ancestor=mysql:8.0")
            if [ -n "$mysql_container" ]; then
              health_status=$(docker inspect $mysql_container --format='{{.State.Health.Status}}' 2>/dev/null || echo "starting")
              echo "MySQL container health status: $health_status (attempt $attempt/$max_attempts)"
              
              if [ "$health_status" = "healthy" ]; then
                echo "‚úÖ MySQL service is healthy after $attempt attempts!"
                break
              fi
            else
              echo "‚ùå MySQL container not found (attempt $attempt/$max_attempts)"
            fi
            
            attempt=$((attempt + 1))
            sleep 5
          done
          
          if [ $attempt -eq $max_attempts ]; then
            echo "‚ùå MySQL health check failed after $max_attempts attempts"
            echo "MySQL container status:"
            docker ps -a | grep mysql
            echo "MySQL logs:"
            docker logs $(docker ps -aq --filter "ancestor=mysql:8.0") | tail -100
            exit 1
          fi
          
          # Additional connection test with retries
          echo "üîó Testing MySQL connection with retries..."
          connection_attempt=0
          max_connection_attempts=10
          
          while [ $connection_attempt -lt $max_connection_attempts ]; do
            if mysql --host=127.0.0.1 --port=3306 --user=root --password=test_password --execute="SELECT 'Connection successful!' as status, VERSION() as mysql_version;" 2>/dev/null; then
              echo "‚úÖ MySQL connection successful after $connection_attempt attempts!"
              break
            fi
            connection_attempt=$((connection_attempt + 1))
            echo "MySQL connection attempt $connection_attempt/$max_connection_attempts failed, retrying..."
            sleep 3
          done
          
          if [ $connection_attempt -eq $max_connection_attempts ]; then
            echo "‚ùå MySQL connection failed after $max_connection_attempts attempts"
            echo "Final MySQL logs:"
            docker logs $(docker ps -q --filter "ancestor=mysql:8.0") | tail -50
            exit 1
          fi
          
      - name: Run database setup
        run: |
          echo "üóÑÔ∏è Setting up test database..."
          
          # Test connection first
          echo "Testing connection to MySQL..."
          mysql --host=127.0.0.1 --port=3306 --user=root --password=test_password --execute="SELECT 'Database connection OK' as status, DATABASE() as current_db;"
          
          # Verify database exists
          echo "Checking if database exists..."
          mysql --host=127.0.0.1 --port=3306 --user=root --password=test_password --execute="SHOW DATABASES LIKE 'hanaya_shop_test';"
          
          # Test Laravel database connection
          echo "Testing Laravel database configuration..."
          php artisan config:cache --env=testing
          php artisan db:show --env=testing || echo "‚ö†Ô∏è Laravel DB connection test failed"
          
          # Run migrations
          echo "Running migrations..."
          php artisan migrate --env=testing --force --no-interaction
          echo "‚úÖ Database migrated for testing"
          
          # Verify tables were created
          echo "Verifying tables..."
          table_count=$(mysql --host=127.0.0.1 --port=3306 --user=root --password=test_password hanaya_shop_test --execute="SELECT COUNT(*) as table_count FROM information_schema.tables WHERE table_schema = 'hanaya_shop_test';" --skip-column-names --silent)
          echo "Created $table_count tables in database"
          
          if [ "$table_count" -gt 0 ]; then
            echo "Sample tables:"
            mysql --host=127.0.0.1 --port=3306 --user=root --password=test_password hanaya_shop_test --execute="SHOW TABLES;" | head -10
          else
            echo "‚ùå No tables created - migration may have failed"
            exit 1
          fi

      - name: Run Unit Tests (Core - Must Pass)
        run: |
          echo "üß™ Running Unit tests (core functionality)..."
          ./vendor/bin/phpunit --testsuite=Unit --testdox --colors=always --stop-on-failure
          echo "‚úÖ Unit tests completed successfully"
          
      - name: Run Database Unit Tests (Fast DB Operations)
        run: |
          echo "üîó Running Database Unit tests (fast DB operations)..."
          ./vendor/bin/phpunit --testsuite=UnitDB --testdox --colors=always
          echo "‚úÖ Database Unit tests completed"
          
      - name: Run Feature Tests (End-to-End)
        run: |
          echo "üé≠ Running Feature tests (end-to-end)..."
          ./vendor/bin/phpunit --testsuite=Feature --testdox --colors=always
          echo "‚úÖ Feature tests completed"
          
      - name: Generate test coverage (on develop)
        if: github.ref == 'refs/heads/develop'
        run: |
          echo "üìä Generating test coverage for all test suites..."
          ./vendor/bin/phpunit --testsuite=All --coverage-text --coverage-clover=coverage.xml --testdox || echo "‚ö†Ô∏è Coverage generation completed with warnings"
          
      - name: Upload coverage reports
        if: github.ref == 'refs/heads/develop'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

  # üé® Code Quality
  quality:
    name: üé® Code Quality
    runs-on: ubuntu-latest
    needs: [setup, dependencies]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, redis
          tools: composer:v2

      - name: Restore built assets
        uses: actions/cache@v3
        with:
          path: |
            vendor/
            node_modules/
            public/build/
          key: built-assets-${{ github.sha }}

      - name: Run PHP Linting (Laravel Pint)
        run: |
          ./vendor/bin/pint --test
          
      - name: Run static analysis (optional)
        continue-on-error: true
        run: |
          if [ -f "./vendor/bin/phpstan" ]; then
            ./vendor/bin/phpstan analyse --no-progress
          else
            echo "‚ö†Ô∏è PHPStan not installed, skipping static analysis"
          fi

  # üîí Security Scan
  security:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    needs: [setup, dependencies]
    if: needs.setup.outputs.should-run-security == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          tools: composer:v2

      - name: Restore built assets
        uses: actions/cache@v3
        with:
          path: |
            vendor/
            node_modules/
            public/build/
          key: built-assets-${{ github.sha }}

      - name: Check for vulnerabilities
        run: |
          echo "üîí Running security audit..."
          composer audit || echo "‚ö†Ô∏è Vulnerabilities found - review required"
          
      - name: Check NPM vulnerabilities
        run: |
          echo "üîí Running NPM audit..."
          npm audit --audit-level=high || echo "‚ö†Ô∏è NPM vulnerabilities found"

  # üê≥ Docker Build Test
  docker:
    name: üê≥ Docker Build Test
    runs-on: ubuntu-latest
    needs: [setup, tests]
    if: needs.setup.outputs.should-run-docker == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: hanaya-shop:test-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          echo "üê≥ Testing Docker container..."
          docker run --rm -d --name hanaya-test-${{ github.run_number }} hanaya-shop:test-${{ github.sha }}
          sleep 15
          
          echo "üìã Container logs:"
          docker logs hanaya-test-${{ github.run_number }}
          
          echo "üè• Health check:"
          if docker exec hanaya-test-${{ github.run_number }} curl -f http://localhost > /dev/null 2>&1; then
            echo "‚úÖ Docker image is healthy!"
          else
            echo "‚ö†Ô∏è Docker health check failed"
          fi
          
          docker stop hanaya-test-${{ github.run_number }}

  # üìä Results Summary
  summary:
    name: üìä Test Results
    runs-on: ubuntu-latest
    needs: [setup, tests, quality, security, docker]
    if: always()
    
    steps:
      - name: Generate summary
        run: |
          echo "## üìä Test Suite Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| üì¶ Dependencies | ${{ needs.dependencies.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üß™ Tests | ${{ needs.tests.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üé® Code Quality | ${{ needs.quality.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üîí Security | ${{ needs.security.result == 'success' && '‚úÖ Clean' || needs.security.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ö†Ô∏è Issues' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üê≥ Docker | ${{ needs.docker.result == 'success' && '‚úÖ Built' || needs.docker.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.tests.result }}" == "success" && "${{ needs.quality.result }}" == "success" ]]; then
            echo "### üéâ All core tests passed! Ready for deployment." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ö†Ô∏è Some tests failed. Review before merging." >> $GITHUB_STEP_SUMMARY
          fi